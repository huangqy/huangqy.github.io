<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Huangqy's blog]]></title>
  <subtitle><![CDATA[Happy every day]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://huangqy.github.io/"/>
  <updated>2014-05-26T06:24:06.792Z</updated>
  <id>http://huangqy.github.io/</id>
  
  <author>
    <name><![CDATA[huangqy]]></name>
    <email><![CDATA[hqy603579562@Gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[NoSQL你值得拥有]]></title>
    <link href="http://huangqy.github.io/2014/05/26/nosql%E4%BD%A0%E5%80%BC%E5%BE%97%E6%8B%A5%E6%9C%89/"/>
    <id>http://huangqy.github.io/2014/05/26/nosql你值得拥有/</id>
    <published>2014-05-26T02:19:27.000Z</published>
    <updated>2014-05-26T04:44:47.000Z</updated>
    <content type="html"><![CDATA[<p>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。<br><a id="more"></a></p>
<h2 id="1-_NoSQL简介">1. NoSQL简介</h2>
<p>NoSQL(NoSQL = Not Only SQL )，意即<strong>“不仅仅是SQL”</strong>，是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p>
<h2 id="2-_发展现状">2. 发展现状</h2>
<p>现今的计算机体系结构在数据存储方面要求应用架构具备庞大的水平扩展性，而NoSQL正在致力于改变这一现状。目前新浪微博的Redis和Google的Bigtable以及Amazon的SimpleDB使用的就是NoSQL型数据库。  </p>
<p>NoSQL项目的名字上看不出什么相同之处，但是，它们通常在某些方面相同：它们可以处理超大量的数据。  </p>
<p>这场革命目前仍然需要等待。NoSQL对大型企业来说还不是主流，但是，一两年之后很可能就会变个样子。在NoSQL运动的最新一次聚会中，来自世界各地的150人挤满了CBS Interactive的一间会议室。分享他们如何推翻缓慢而昂贵的关系数据库的暴政，怎样使用更有效和更便宜的方法来管理数据。  </p>
<p>关系型数据库给你强加了太多东西。它们要你强行修改对象数据，以满足数据库系统的需要。在NoSQL拥护者们来看，基于NoSQL的数据库替代方案<strong>“只是给你所需要的”</strong>。</p>
<h2 id="3-_为什么是NoSQL">3. 为什么是NoSQL</h2>
<p>随着互联网web2.0网站的兴起，非关系型的数据库现在成了一个极其热门的新领域，非关系数据库产品的发展非常迅速，而传统的关系型数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，例如：  </p>
<p><strong>1. High performance - 对数据库高并发读写的需求</strong><br>web2.0 网站要根据用户个性化信息来实时生成动态页面和提供动态信息，所以基本上无法使用动态页面静态化技术，因此数据库并发负载非常高，往往要达到每秒上万次读写请求。关系型数据库应付上万次SQL查询还勉强顶得住，但是应付上万次 SQL 写数据请求，硬盘IO 就已经无法承受了，其实对于普通的 BBS 网站，往往也存在对高并发写请求的需求。</p>
<p><strong>2. Huge Storage - 对海量数据的高效率存储和访问的需求</strong><br>对于大型的SNS网站，每天用户产生海量的用户动态信息，以国外的Friend feed为例，一个月就达到了2.5亿条用户动态，对于关系数据库来说，在一张2.5亿条记录的表里面进行SQL查询，效率是极其低下乃至不可忍受的。再例如大型web网站的用户登录系统，例如腾讯，盛大，动辄数以亿计的帐号，关系数据库也很难应付。</p>
<p><strong>3. High Scalability &amp;&amp; High Availability - 对数据库的高可扩展性和高可用性的需求</strong><br>在基于web的架构当中，数据库是最难进行横向扩展的，当一个应用系统的用户量和访问量与日俱增的时候，你的数据库却没有办法像web server和app server那样简单的通过添加更多的硬件和服务节点来扩展性能和负载能力。对于很多需要提供24小时不间断服务的网站来说，对数据库系统进行升级和扩展是非常痛苦的事情，往往需要停机维护和数据迁移，可是停机维护随之带来的就是公司收入的减少。</p>
<p>在上面提到的“三高”需求面前，关系数据库遇到了难以克服的障碍，而对于web2.0网站来说，关系数据库的很多主要特性却往往无用武之地，例如：</p>
<p><strong>1. 数据库事务一致性需求</strong><br>很多web实时系统并不要求严格的数据库事务，对读一致性的要求很低，有些场合对写一致性要求也不高。因此数据库事务管理成了数据库高负载下一个沉重的负担。</p>
<p><strong>2. 数据库的写实时性和读实时性需求</strong><br>对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多web应用来说，并不要求这么高的实时性。</p>
<p><strong>3、对复杂的SQL查询，特别是多表关联查询的需求</strong><br>任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的复杂SQL报表查询，特别是SNS类型的网站，从需求以及产品设计角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能被极大的弱化了。<br>因此，关系数据库在这些越来越多的应用场景下显得不那么合适了，为了解决这类问题的NoSQL数据库应运而生。</p>
<p>NoSQL是非关系型数据存储的广义定义。它打破了长久以来关系型数据库与ACID理论大一统的局面。NoSQL数据存储不需要固定的表结构，通常也不存在连接操作。在大数据存取上具备关系型数据库无法比拟的性能优势，该概念在2009年初得到了广泛认同。</p>
<p>当今的应用体系结构需要数据存储在横向伸缩性上能够满足需求。而NoSQL存储就是为了实现这个需求。Google的BigTable与Amazon的Dynamo是非常成功的商业NoSQL实现。一些开源的NoSQL体系，如Facebook的Cassandra，Apache的HBase，也得到了广泛认同。从这些NoSQL项目的名字上看不出什么相同之处：Hadoop、Voldemort、Dynomite，还有其它很多，但它们都有一个共同的特点，就是要改变大家对数据库在传统意义上的理解。</p>
<h2 id="4-_NoSQL特点">4. NoSQL特点</h2>
<p><strong>1. 它可以处理超大量的数据</strong></p>
<p><strong>2. 它运行在便宜的 PC 服务器集群上</strong><br>PC集群扩充起来非常方便并且成本很低，避免了传统商业数据库“sharding”操作的复杂性和成本。</p>
<p><strong>3. 它击碎了性能瓶颈</strong><br>NoSQL的支持者称，通过NoSQL架构可以省去将Web或Java应用和数据转换成 SQL 格式的时间，执行速度变得更快。<br>“SQL并非适用于所有的程序代码”，对于那些繁重的重复操作的数据，SQL值得花钱。但是当数据库结构非常简单时，SQL可能没有太大用处。</p>
<p><strong>4. 它没有过多的操作</strong><br>虽然NoSQL的支持者也承认关系型数据库提供了无可比拟的功能集合，而且在数据完整性上也发挥绝对稳定，他们同时也表示，企业的具体需求可能没有那么复杂。</p>
<p><strong>5. 它的支持者源于社区</strong><br>因为NoSQL项目都是开源的，因此它们缺乏供应商提供的正式支持。这一点它们与大多数开源项目一样，不得不从社区中寻求支持。</p>
<h2 id="5-_优点">5. 优点</h2>
<p><strong>易扩展</strong><br><strong>大数据量，高性能</strong><br><strong>灵活的数据模型</strong><br><strong>高可用</strong></p>
<h2 id="6-_缺点">6. 缺点</h2>
<p>来自开源社区的项目都有一个最大的弊病：没有正式的官方支持，万一除了差错会很可怕；此外，NoSQL没有标准规范，产品混乱。</p>
]]></content>
    <summary type="html"><![CDATA[<p>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。<br>]]></summary>
    
      <category term="NoSQL" scheme="http://huangqy.github.io/tags/NoSQL/"/>
    
      <category term="NoSQL" scheme="http://huangqy.github.io/categories/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NoSQL系列之走进mongoDB]]></title>
    <link href="http://huangqy.github.io/2014/05/26/nosql%E7%B3%BB%E5%88%97%E4%B9%8B%E8%B5%B0%E8%BF%9Bmongodb/"/>
    <id>http://huangqy.github.io/2014/05/26/nosql系列之走进mongodb/</id>
    <published>2014-05-26T02:12:36.000Z</published>
    <updated>2014-05-26T04:45:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="初识_MongoDB">初识 MongoDB</h2>
<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似 json 的 bjson 格式，因此可以存储比较复杂的数据类型。MongoDB 最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。它是一个面向集合的,模式自由的文档型数据库。<br><a id="more"></a></p>
<p><strong>1. 面向集合（Collenction-Orented）</strong><br>意思是数据被分组存储在数据集中， 被称为一个集合（Collenction)。每个集合在数据库中都有一个唯一的标识名，并且可以包含无限数目的文档。集合的概念类似关系型数据库（RDBMS）里的表（table），不同的是它不需要定义任何模式（schema)。</p>
<p><strong>2. 模式自由（schema-free）</strong><br>意味着对于存储在 MongoDB 数据库中的文件，我们不需要知道它的任何结构定义。提了这么多次”无模式”或”模式自由”，它到是个什么概念呢？例如，下面两个记录可以存在于同一个集合里面：<br>{“welcome” : “Beijing”}<br>{“age” : 25}</p>
<p><strong>3. 文档型</strong><br>意思是我们存储的数据是键-值对的集合,键是字符串,值可以是数据类型集合里的任意类型,包括数组和文档. 我们把这个数据格式称作 “BSON” 即 “Binary Serialized dOcument Notation.”</p>
<h2 id="特点">特点</h2>
<ul>
<li>面向集合存储，易于存储对象类型的数据</li>
<li>模式自由</li>
<li>支持动态查询</li>
<li>支持完全索引，包含内部对象</li>
<li>支持查询</li>
<li>支持复制和故障恢复</li>
<li>使用高效的二进制数据存储，包括大型对象（如视频等）</li>
<li>自动处理碎片，以支持云计算层次的扩展性</li>
<li>支持 Python，PHP，Ruby，Java，C，C#，Javascript，Perl 及 C++语言的驱动程序，社区中也提供了对 Erlang 及.NET 等平台的驱动程序</li>
<li>文件存储格式为 BSON（一种 JSON 的扩展）</li>
<li>可通过网络访问</li>
</ul>
<h2 id="功能">功能</h2>
<ul>
<li><strong>面向集合的存储：</strong>适合存储对象及 JSON 形式的数据</li>
<li><strong>动态查询：</strong>MongoDB 支持丰富的查询表达式。查询指令使用 JSON 形式的标记，可轻易查询文档中内嵌的对象及数组</li>
<li><strong>完整的索引支持：</strong>包括文档内嵌对象及数组。MongoDB 的查询优化器会分析查询表达式，并生成一个高效的查询计划</li>
<li><strong>查询监视：</strong>MongoDB 包含一系列监视工具用于分析数据库操作的性能</li>
<li><strong>复制及自动故障转移：</strong>MongoDB 数据库支持服务器之间的数据复制，支持主-从模式及服务器之间的相互复制。复制的主要目标是提供冗余及自动故障转移</li>
<li><strong>高效的传统存储方式：</strong>支持二进制数据及大型对象（如照片或图片）</li>
<li><strong>自动分片以支持云级别的伸缩性：</strong>自动分片功能支持水平的数据库集群，可动态添加额外的机器</li>
</ul>
<h2 id="适用场合">适用场合</h2>
<p><strong>1. 网站数据：</strong>MongoDB 非常适合实时的插入，更新与查询，并具备网站实时数据存储所<br>需的复制及高度伸缩性</p>
<p><strong>2. 缓存：</strong>由于性能很高，MongoDB 也适合作为信息基础设施的缓存层。在系统重启之后，<br>由 MongoDB 搭建的持久化缓存层可以避免下层的数据源过载</p>
<p><strong>3. 大尺寸，低价值的数据：</strong>使用传统的关系型数据库存储一些数据时可能会比较昂贵，在<br>此之前，很多时候程序员往往会选择传统的文件进行存储</p>
<p><strong>4. 高伸缩性的场景：</strong>MongoDB 非常适合由数十或数百台服务器组成的数据库。MongoDB<br>的路线图中已经包含对 MapReduce 引擎的内置支持</p>
<p><strong>5. 用于对象及 JSON 数据的存储：</strong>MongoDB 的 BSON 数据格式非常适合文档化格式的存储<br>及查询</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="初识_MongoDB">初识 MongoDB</h2>
<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似 json 的 bjson 格式，因此可以存储比较复杂的数据类型。MongoDB 最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。它是一个面向集合的,模式自由的文档型数据库。<br>]]></summary>
    
      <category term="NoSQL" scheme="http://huangqy.github.io/tags/NoSQL/"/>
    
      <category term="MongoDB" scheme="http://huangqy.github.io/tags/MongoDB/"/>
    
      <category term="MongoDB" scheme="http://huangqy.github.io/categories/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo系列一]]></title>
    <link href="http://huangqy.github.io/2014/05/25/Hexo%E7%B3%BB%E5%88%97%E4%B8%80/"/>
    <id>http://huangqy.github.io/2014/05/25/Hexo系列一/</id>
    <published>2014-05-25T01:35:19.000Z</published>
    <updated>2014-05-26T04:50:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Hexo—创建博客的利器（一）">Hexo—创建博客的利器（一）</h2>
<h3 id="Hexo简介">Hexo简介</h3>
<p><strong>hexo</strong>是一个基于<strong>Node.js</strong>的静态博客网站生成器。我们可以利用<strong>Hexo</strong>来创建自己的个人博客并且将博客托管在github或Heroku上。作者是来自宝岛台湾的<a href="https://github.com/tommy351/hexo" target="_blank">@tommy351</a>。<a id="more"></a></p>
<h3 id="Hexo特点(摘自@tommy351)">Hexo特点(摘自<a href="https://github.com/tommy351/hexo" target="_blank">@tommy351</a>)</h3>
<blockquote>
<p>不可思议的快速 ─ 只要一眨眼静态文件即生成完成<br>支持 Markdown<br>仅需一道指令即可部署到 GitHub Pages 和 Heroku<br>已移植 Octopress 插件<br>高扩展性、自订性<br>兼容于 Windows, Mac &amp; Linux</p>
</blockquote>
<h3 id="Hexo使用要求">Hexo使用要求</h3>
<ul>
<li>Hexo是轻量级的，无需数据库</li>
<li>Hexo来自开源社区的一个<strong>免费</strong>的博客网站生成器，任何人都可以对Hexo做定制、改造和学习</li>
<li>Hexo技术要求不是很高，只需要Node.js,GitHub,Git,Markdown这四个工具</li>
</ul>
<h3 id="精彩预告">精彩预告</h3>
<p>下一节内容：教你如何搭建Hexo环境</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="Hexo—创建博客的利器（一）">Hexo—创建博客的利器（一）</h2>
<h3 id="Hexo简介">Hexo简介</h3>
<p><strong>hexo</strong>是一个基于<strong>Node.js</strong>的静态博客网站生成器。我们可以利用<strong>Hexo</strong>来创建自己的个人博客并且将博客托管在github或Heroku上。作者是来自宝岛台湾的<a href="https://github.com/tommy351/hexo" target="_blank">@tommy351</a>。]]></summary>
    
      <category term="Node.js" scheme="http://huangqy.github.io/tags/Node.js/"/>
    
      <category term="Hexo" scheme="http://huangqy.github.io/tags/Hexo/"/>
    
      <category term="Hexo" scheme="http://huangqy.github.io/categories/Hexo/"/>
    
  </entry>
  
</feed>
